#include<stdio.h>
#include<windows.h>
#include<conio.h>
#include<time.h>
#include<iostream>
#include<string>

using namespace std;

void Server(char* path);
void Client();



int main(int argc, char* argv[])       //для ввода(ничего большего)
{
	switch(argc)
	{

	case 1:
		Server(argv[0]);		
		break;

	default:
		Client();		
		break;
	}
	}



void Server(char* path)         //канал сервера для передачи информации каналу клиент
{
	STARTUPINFO si;                      
	ZeroMemory( &si, sizeof(si) );     //очищаем память и место для создания процесса
	si.cb = sizeof(si);                          

	PROCESS_INFORMATION childProcessInfo;		//очищем память для создания дочернего процесса
	ZeroMemory(&childProcessInfo, sizeof(childProcessInfo));	

	HANDLE hMyPipe;		//объявляем канал и семафоры
	HANDLE Semaphores[3];		

	char buffer[20];				 // буффер ввода
	int bufferSize = sizeof(buffer); 

	string message;


	Semaphores[0] = CreateSemaphore(NULL, 0 , 1, "SEMAPHORE_lab3");     		 //семафор для считывания текста с родительского процесса
	Semaphores[1] = CreateSemaphore(NULL, 0 , 1, "SEMAPHORE_end_lab3");		 //семафор для передачи текста в дочерний процесс
	Semaphores[2] = CreateSemaphore(NULL, 0 , 1, "SEMAPHORE_EXIT_lab3");		//семафор для вывода в дочернем процессе

	cout<<"Server process\n\n";

	hMyPipe = CreateNamedPipe("\\\\.\\pipe\\MyPipe",PIPE_ACCESS_OUTBOUND,PIPE_TYPE_MESSAGE|PIPE_WAIT,PIPE_UNLIMITED_INSTANCES ,0,0,INFINITE,(LPSECURITY_ATTRIBUTES)NULL);//создание канала процессом родительским, что делает его сервером

	CreateProcess(path, " 2", NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, &si, &childProcessInfo);//создание процесса в новом окне

	if(!ConnectNamedPipe(hMyPipe,(LPOVERLAPPED)NULL))\\проверка
		cout<<"Connection failure\n";

	while(1)\\бесконечный цикл на вводи информации в родительский процесс
	{				
		DWORD NumberOfBytesWritten;\\количество записанных байтов

		cout << "\nEnter message:\n";
		cin.clear();
		getline(cin, message);\\считываем ввод


		if(message == "0")
		{
			ReleaseSemaphore(Semaphores[2], 1, NULL);  //Значение счетчика ресурсов увеличивается
			WaitForSingleObject(childProcessInfo.hProcess, INFINITE);
			break;
		}

		ReleaseSemaphore(Semaphores[0], 1, NULL);   // Значение счетчика ресурсов увеличивается

		int NumberOfBlocks = message.size() / bufferSize + 1;	\\выводим по частям	
		WriteFile(hMyPipe, &NumberOfBlocks, sizeof(NumberOfBlocks), &NumberOfBytesWritten, (LPOVERLAPPED)NULL);//сбрасывает событие

		int size = message.size();
		WriteFile(hMyPipe, &size, sizeof(size), &NumberOfBytesWritten, (LPOVERLAPPED)NULL);

		for(int i = 0; i < NumberOfBlocks; i++)\\выводим по частям
		{					
			message.copy(buffer, bufferSize, i*bufferSize);		
			if(!WriteFile(hMyPipe, buffer, bufferSize, &NumberOfBytesWritten,(LPOVERLAPPED)NULL)) cout<<"Write Error\n";
		}				

		WaitForSingleObject(Semaphores[1], INFINITE); // синхранизация процессов чтения
	}			

	CloseHandle(hMyPipe);\\закрытие
	CloseHandle(Semaphores[0]);
	CloseHandle(Semaphores[1]);
	cout << "\n\n";
	system("pause");
	return;
}

void Client()
{
	HANDLE hMyPipe;
	HANDLE Semaphores[3];	

	char buffer[20];				 
	int bufferSize = sizeof(buffer); 

	string message;

	bool successFlag;
	Semaphores[0] = OpenSemaphore(SEMAPHORE_ALL_ACCESS, TRUE, "SEMAPHORE_lab3");
	Semaphores[1] = OpenSemaphore(SEMAPHORE_ALL_ACCESS, TRUE, "SEMAPHORE_end_lab3");
	Semaphores[2] =  OpenSemaphore(SEMAPHORE_ALL_ACCESS, TRUE, "SEMAPHORE_EXIT_lab3");

	cout<<"Child process\n\n";

	hMyPipe = CreateFile("\\\\.\\pipe\\MyPipe",GENERIC_READ,FILE_SHARE_WRITE,NULL,OPEN_EXISTING,0,NULL);//создание канала


	while(1)
	{				
		successFlag = TRUE;
		DWORD NumberOfBytesRead;
		message.clear();

		int index = WaitForMultipleObjects(3, Semaphores, FALSE, INFINITE) - WAIT_OBJECT_0; // 
		if (index == 2) 
			break;					

		int NumberOfBlocks;
		if(!ReadFile(hMyPipe, &NumberOfBlocks, sizeof(NumberOfBlocks), &NumberOfBytesRead, NULL)) break;

		int size;
		if(!ReadFile(hMyPipe, &size, sizeof(size), &NumberOfBytesRead, NULL)) break;

		for( int i=0; i < NumberOfBlocks; i++)
		{
			successFlag = ReadFile(hMyPipe, buffer, bufferSize, &NumberOfBytesRead, NULL);
			if(!successFlag) break;

			message.append(buffer, bufferSize); 
		}
		if(!successFlag) break;

		message.resize(size);

	//	cout << message << "\n\n";
		for(int i =0; i < size; i++)
		{
			cout << message[i];
			Sleep(100);
		}
		cout<<endl;
		//				cout<<"\n\t\t\tMessage was printed successfully\n";

		ReleaseSemaphore(Semaphores[1], 1, NULL);	
	}
	CloseHandle(hMyPipe);
	CloseHandle(Semaphores[0]);
	CloseHandle(Semaphores[1]);
	return;
}
